#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     Il codice è stato generato da uno strumento.
//     Versione runtime:4.0.30319.42000
//
//     Le modifiche apportate a questo file possono provocare un comportamento non corretto e andranno perse se
//     il codice viene rigenerato.
// </auto-generated>
//------------------------------------------------------------------------------

namespace ProtoLeaf_WF
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="Sftw")]
	public partial class connectionTestDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Definizioni metodo Extensibility
    partial void OnCreated();
    partial void InsertSkill(Skill instance);
    partial void UpdateSkill(Skill instance);
    partial void DeleteSkill(Skill instance);
    partial void InsertSkills_satisfy_Requirements(Skills_satisfy_Requirements instance);
    partial void UpdateSkills_satisfy_Requirements(Skills_satisfy_Requirements instance);
    partial void DeleteSkills_satisfy_Requirements(Skills_satisfy_Requirements instance);
    partial void InsertRequirement(Requirement instance);
    partial void UpdateRequirement(Requirement instance);
    partial void DeleteRequirement(Requirement instance);
    partial void InsertDeviceType(DeviceType instance);
    partial void UpdateDeviceType(DeviceType instance);
    partial void DeleteDeviceType(DeviceType instance);
    partial void InsertAuxiliaryDeviceType(AuxiliaryDeviceType instance);
    partial void UpdateAuxiliaryDeviceType(AuxiliaryDeviceType instance);
    partial void DeleteAuxiliaryDeviceType(AuxiliaryDeviceType instance);
    partial void InsertDirective(Directive instance);
    partial void UpdateDirective(Directive instance);
    partial void DeleteDirective(Directive instance);
    partial void InsertUser(User instance);
    partial void UpdateUser(User instance);
    partial void DeleteUser(User instance);
    partial void InsertDomain(Domain instance);
    partial void UpdateDomain(Domain instance);
    partial void DeleteDomain(Domain instance);
    partial void InsertDomains_is_ruled_by_Directives(Domains_is_ruled_by_Directives instance);
    partial void UpdateDomains_is_ruled_by_Directives(Domains_is_ruled_by_Directives instance);
    partial void DeleteDomains_is_ruled_by_Directives(Domains_is_ruled_by_Directives instance);
    partial void InsertEnvironment(Environment instance);
    partial void UpdateEnvironment(Environment instance);
    partial void DeleteEnvironment(Environment instance);
    partial void InsertPassword(Password instance);
    partial void UpdatePassword(Password instance);
    partial void DeletePassword(Password instance);
    partial void InsertProcedure(Procedure instance);
    partial void UpdateProcedure(Procedure instance);
    partial void DeleteProcedure(Procedure instance);
    partial void InsertProtocol(Protocol instance);
    partial void UpdateProtocol(Protocol instance);
    partial void DeleteProtocol(Protocol instance);
    partial void InsertProtocol_associated_Environment(Protocol_associated_Environment instance);
    partial void UpdateProtocol_associated_Environment(Protocol_associated_Environment instance);
    partial void DeleteProtocol_associated_Environment(Protocol_associated_Environment instance);
    partial void InsertProtocol_validate_Skill(Protocol_validate_Skill instance);
    partial void UpdateProtocol_validate_Skill(Protocol_validate_Skill instance);
    partial void DeleteProtocol_validate_Skill(Protocol_validate_Skill instance);
    partial void InsertRole(Role instance);
    partial void UpdateRole(Role instance);
    partial void DeleteRole(Role instance);
    partial void InsertSafetyFunction(SafetyFunction instance);
    partial void UpdateSafetyFunction(SafetyFunction instance);
    partial void DeleteSafetyFunction(SafetyFunction instance);
    partial void InsertSafetyFunction_realize_Skill(SafetyFunction_realize_Skill instance);
    partial void UpdateSafetyFunction_realize_Skill(SafetyFunction_realize_Skill instance);
    partial void DeleteSafetyFunction_realize_Skill(SafetyFunction_realize_Skill instance);
    partial void InsertSkillTargetMetrics(SkillTargetMetrics instance);
    partial void UpdateSkillTargetMetrics(SkillTargetMetrics instance);
    partial void DeleteSkillTargetMetrics(SkillTargetMetrics instance);
    partial void InsertStandard(Standard instance);
    partial void UpdateStandard(Standard instance);
    partial void DeleteStandard(Standard instance);
    partial void InsertStandard_satisfy_Requirements(Standard_satisfy_Requirements instance);
    partial void UpdateStandard_satisfy_Requirements(Standard_satisfy_Requirements instance);
    partial void DeleteStandard_satisfy_Requirements(Standard_satisfy_Requirements instance);
    partial void InsertStandard_binds_Skills(Standard_binds_Skills instance);
    partial void UpdateStandard_binds_Skills(Standard_binds_Skills instance);
    partial void DeleteStandard_binds_Skills(Standard_binds_Skills instance);
    partial void InsertTestPlan(TestPlan instance);
    partial void UpdateTestPlan(TestPlan instance);
    partial void DeleteTestPlan(TestPlan instance);
    #endregion
		
		public connectionTestDataContext() : 
				base(global::ProtoLeaf_WF.Properties.Settings.Default.DBConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public connectionTestDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public connectionTestDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public connectionTestDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public connectionTestDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<Skill> Skill
		{
			get
			{
				return this.GetTable<Skill>();
			}
		}
		
		public System.Data.Linq.Table<Skills_satisfy_Requirements> Skills_satisfy_Requirements
		{
			get
			{
				return this.GetTable<Skills_satisfy_Requirements>();
			}
		}
		
		public System.Data.Linq.Table<Requirement> Requirement
		{
			get
			{
				return this.GetTable<Requirement>();
			}
		}
		
		public System.Data.Linq.Table<DeviceType> DeviceType
		{
			get
			{
				return this.GetTable<DeviceType>();
			}
		}
		
		public System.Data.Linq.Table<AuxiliaryDeviceType> AuxiliaryDeviceType
		{
			get
			{
				return this.GetTable<AuxiliaryDeviceType>();
			}
		}
		
		public System.Data.Linq.Table<Directive> Directive
		{
			get
			{
				return this.GetTable<Directive>();
			}
		}
		
		public System.Data.Linq.Table<User> User
		{
			get
			{
				return this.GetTable<User>();
			}
		}
		
		public System.Data.Linq.Table<Domain> Domain
		{
			get
			{
				return this.GetTable<Domain>();
			}
		}
		
		public System.Data.Linq.Table<Domains_is_ruled_by_Directives> Domains_is_ruled_by_Directives
		{
			get
			{
				return this.GetTable<Domains_is_ruled_by_Directives>();
			}
		}
		
		public System.Data.Linq.Table<Environment> Environment
		{
			get
			{
				return this.GetTable<Environment>();
			}
		}
		
		public System.Data.Linq.Table<Password> Password
		{
			get
			{
				return this.GetTable<Password>();
			}
		}
		
		public System.Data.Linq.Table<Procedure> Procedure
		{
			get
			{
				return this.GetTable<Procedure>();
			}
		}
		
		public System.Data.Linq.Table<Protocol> Protocol
		{
			get
			{
				return this.GetTable<Protocol>();
			}
		}
		
		public System.Data.Linq.Table<Protocol_associated_Environment> Protocol_associated_Environment
		{
			get
			{
				return this.GetTable<Protocol_associated_Environment>();
			}
		}
		
		public System.Data.Linq.Table<Protocol_validate_Skill> Protocol_validate_Skill
		{
			get
			{
				return this.GetTable<Protocol_validate_Skill>();
			}
		}
		
		public System.Data.Linq.Table<Role> Role
		{
			get
			{
				return this.GetTable<Role>();
			}
		}
		
		public System.Data.Linq.Table<SafetyFunction> SafetyFunction
		{
			get
			{
				return this.GetTable<SafetyFunction>();
			}
		}
		
		public System.Data.Linq.Table<SafetyFunction_realize_Skill> SafetyFunction_realize_Skill
		{
			get
			{
				return this.GetTable<SafetyFunction_realize_Skill>();
			}
		}
		
		public System.Data.Linq.Table<SkillTargetMetrics> SkillTargetMetrics
		{
			get
			{
				return this.GetTable<SkillTargetMetrics>();
			}
		}
		
		public System.Data.Linq.Table<Standard> Standard
		{
			get
			{
				return this.GetTable<Standard>();
			}
		}
		
		public System.Data.Linq.Table<Standard_satisfy_Requirements> Standard_satisfy_Requirements
		{
			get
			{
				return this.GetTable<Standard_satisfy_Requirements>();
			}
		}
		
		public System.Data.Linq.Table<Standard_binds_Skills> Standard_binds_Skills
		{
			get
			{
				return this.GetTable<Standard_binds_Skills>();
			}
		}
		
		public System.Data.Linq.Table<TestPlan> TestPlan
		{
			get
			{
				return this.GetTable<TestPlan>();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Skill")]
	public partial class Skill : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private string _Name;
		
		private string _Short_Description;
		
		private string _Definition;
		
		private System.Nullable<int> _id_AbstractTargetMetrics;
		
		private EntitySet<Skills_satisfy_Requirements> _Skills_satisfy_Requirements;
		
		private EntitySet<Protocol_validate_Skill> _Protocol_validate_Skill;
		
		private EntitySet<SafetyFunction_realize_Skill> _SafetyFunction_realize_Skill;
		
		private EntitySet<Standard_binds_Skills> _Standard_binds_Skills;
		
    #region Definizioni metodo Extensibility
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnShort_DescriptionChanging(string value);
    partial void OnShort_DescriptionChanged();
    partial void OnDefinitionChanging(string value);
    partial void OnDefinitionChanged();
    partial void Onid_AbstractTargetMetricsChanging(System.Nullable<int> value);
    partial void Onid_AbstractTargetMetricsChanged();
    #endregion
		
		public Skill()
		{
			this._Skills_satisfy_Requirements = new EntitySet<Skills_satisfy_Requirements>(new Action<Skills_satisfy_Requirements>(this.attach_Skills_satisfy_Requirements), new Action<Skills_satisfy_Requirements>(this.detach_Skills_satisfy_Requirements));
			this._Protocol_validate_Skill = new EntitySet<Protocol_validate_Skill>(new Action<Protocol_validate_Skill>(this.attach_Protocol_validate_Skill), new Action<Protocol_validate_Skill>(this.detach_Protocol_validate_Skill));
			this._SafetyFunction_realize_Skill = new EntitySet<SafetyFunction_realize_Skill>(new Action<SafetyFunction_realize_Skill>(this.attach_SafetyFunction_realize_Skill), new Action<SafetyFunction_realize_Skill>(this.detach_SafetyFunction_realize_Skill));
			this._Standard_binds_Skills = new EntitySet<Standard_binds_Skills>(new Action<Standard_binds_Skills>(this.attach_Standard_binds_Skills), new Action<Standard_binds_Skills>(this.detach_Standard_binds_Skills));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="VarChar(50)")]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Short_Description", DbType="Text", UpdateCheck=UpdateCheck.Never)]
		public string Short_Description
		{
			get
			{
				return this._Short_Description;
			}
			set
			{
				if ((this._Short_Description != value))
				{
					this.OnShort_DescriptionChanging(value);
					this.SendPropertyChanging();
					this._Short_Description = value;
					this.SendPropertyChanged("Short_Description");
					this.OnShort_DescriptionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Definition", DbType="Text", UpdateCheck=UpdateCheck.Never)]
		public string Definition
		{
			get
			{
				return this._Definition;
			}
			set
			{
				if ((this._Definition != value))
				{
					this.OnDefinitionChanging(value);
					this.SendPropertyChanging();
					this._Definition = value;
					this.SendPropertyChanged("Definition");
					this.OnDefinitionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id_AbstractTargetMetrics", DbType="Int")]
		public System.Nullable<int> id_AbstractTargetMetrics
		{
			get
			{
				return this._id_AbstractTargetMetrics;
			}
			set
			{
				if ((this._id_AbstractTargetMetrics != value))
				{
					this.Onid_AbstractTargetMetricsChanging(value);
					this.SendPropertyChanging();
					this._id_AbstractTargetMetrics = value;
					this.SendPropertyChanged("id_AbstractTargetMetrics");
					this.Onid_AbstractTargetMetricsChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Skill_Skills_satisfy_Requirements", Storage="_Skills_satisfy_Requirements", ThisKey="ID", OtherKey="id_Skill")]
		public EntitySet<Skills_satisfy_Requirements> Skills_satisfy_Requirements
		{
			get
			{
				return this._Skills_satisfy_Requirements;
			}
			set
			{
				this._Skills_satisfy_Requirements.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Skill_Protocol_validate_Skill", Storage="_Protocol_validate_Skill", ThisKey="ID", OtherKey="id_Skill")]
		public EntitySet<Protocol_validate_Skill> Protocol_validate_Skill
		{
			get
			{
				return this._Protocol_validate_Skill;
			}
			set
			{
				this._Protocol_validate_Skill.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Skill_SafetyFunction_realize_Skill", Storage="_SafetyFunction_realize_Skill", ThisKey="ID", OtherKey="id_Skill")]
		public EntitySet<SafetyFunction_realize_Skill> SafetyFunction_realize_Skill
		{
			get
			{
				return this._SafetyFunction_realize_Skill;
			}
			set
			{
				this._SafetyFunction_realize_Skill.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Skill_Standard_binds_Skills", Storage="_Standard_binds_Skills", ThisKey="ID", OtherKey="id_Skill")]
		public EntitySet<Standard_binds_Skills> Standard_binds_Skills
		{
			get
			{
				return this._Standard_binds_Skills;
			}
			set
			{
				this._Standard_binds_Skills.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Skills_satisfy_Requirements(Skills_satisfy_Requirements entity)
		{
			this.SendPropertyChanging();
			entity.Skill = this;
		}
		
		private void detach_Skills_satisfy_Requirements(Skills_satisfy_Requirements entity)
		{
			this.SendPropertyChanging();
			entity.Skill = null;
		}
		
		private void attach_Protocol_validate_Skill(Protocol_validate_Skill entity)
		{
			this.SendPropertyChanging();
			entity.Skill = this;
		}
		
		private void detach_Protocol_validate_Skill(Protocol_validate_Skill entity)
		{
			this.SendPropertyChanging();
			entity.Skill = null;
		}
		
		private void attach_SafetyFunction_realize_Skill(SafetyFunction_realize_Skill entity)
		{
			this.SendPropertyChanging();
			entity.Skill = this;
		}
		
		private void detach_SafetyFunction_realize_Skill(SafetyFunction_realize_Skill entity)
		{
			this.SendPropertyChanging();
			entity.Skill = null;
		}
		
		private void attach_Standard_binds_Skills(Standard_binds_Skills entity)
		{
			this.SendPropertyChanging();
			entity.Skill = this;
		}
		
		private void detach_Standard_binds_Skills(Standard_binds_Skills entity)
		{
			this.SendPropertyChanging();
			entity.Skill = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.[Skills-satisfy-Requirements]")]
	public partial class Skills_satisfy_Requirements : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private int _id_Skill;
		
		private int _id_Requirement;
		
		private double _Ranking;
		
		private EntityRef<Skill> _Skill;
		
		private EntityRef<Requirement> _Requirement;
		
    #region Definizioni metodo Extensibility
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void Onid_SkillChanging(int value);
    partial void Onid_SkillChanged();
    partial void Onid_RequirementChanging(int value);
    partial void Onid_RequirementChanged();
    partial void OnRankingChanging(double value);
    partial void OnRankingChanged();
    #endregion
		
		public Skills_satisfy_Requirements()
		{
			this._Skill = default(EntityRef<Skill>);
			this._Requirement = default(EntityRef<Requirement>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id_Skill", DbType="Int NOT NULL")]
		public int id_Skill
		{
			get
			{
				return this._id_Skill;
			}
			set
			{
				if ((this._id_Skill != value))
				{
					if (this._Skill.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.Onid_SkillChanging(value);
					this.SendPropertyChanging();
					this._id_Skill = value;
					this.SendPropertyChanged("id_Skill");
					this.Onid_SkillChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id_Requirement", DbType="Int NOT NULL")]
		public int id_Requirement
		{
			get
			{
				return this._id_Requirement;
			}
			set
			{
				if ((this._id_Requirement != value))
				{
					if (this._Requirement.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.Onid_RequirementChanging(value);
					this.SendPropertyChanging();
					this._id_Requirement = value;
					this.SendPropertyChanged("id_Requirement");
					this.Onid_RequirementChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Ranking", DbType="Float NOT NULL")]
		public double Ranking
		{
			get
			{
				return this._Ranking;
			}
			set
			{
				if ((this._Ranking != value))
				{
					this.OnRankingChanging(value);
					this.SendPropertyChanging();
					this._Ranking = value;
					this.SendPropertyChanged("Ranking");
					this.OnRankingChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Skill_Skills_satisfy_Requirements", Storage="_Skill", ThisKey="id_Skill", OtherKey="ID", IsForeignKey=true)]
		public Skill Skill
		{
			get
			{
				return this._Skill.Entity;
			}
			set
			{
				Skill previousValue = this._Skill.Entity;
				if (((previousValue != value) 
							|| (this._Skill.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Skill.Entity = null;
						previousValue.Skills_satisfy_Requirements.Remove(this);
					}
					this._Skill.Entity = value;
					if ((value != null))
					{
						value.Skills_satisfy_Requirements.Add(this);
						this._id_Skill = value.ID;
					}
					else
					{
						this._id_Skill = default(int);
					}
					this.SendPropertyChanged("Skill");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Requirement_Skills_satisfy_Requirements", Storage="_Requirement", ThisKey="id_Requirement", OtherKey="ID", IsForeignKey=true)]
		public Requirement Requirement
		{
			get
			{
				return this._Requirement.Entity;
			}
			set
			{
				Requirement previousValue = this._Requirement.Entity;
				if (((previousValue != value) 
							|| (this._Requirement.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Requirement.Entity = null;
						previousValue.Skills_satisfy_Requirements.Remove(this);
					}
					this._Requirement.Entity = value;
					if ((value != null))
					{
						value.Skills_satisfy_Requirements.Add(this);
						this._id_Requirement = value.ID;
					}
					else
					{
						this._id_Requirement = default(int);
					}
					this.SendPropertyChanged("Requirement");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Requirement")]
	public partial class Requirement : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private string _Name;
		
		private string _Description;
		
		private string _Section;
		
		private System.Nullable<int> _id_Directive;
		
		private EntitySet<Skills_satisfy_Requirements> _Skills_satisfy_Requirements;
		
		private EntitySet<Standard_satisfy_Requirements> _Standard_satisfy_Requirements;
		
		private EntityRef<Directive> _Directive;
		
    #region Definizioni metodo Extensibility
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnDescriptionChanging(string value);
    partial void OnDescriptionChanged();
    partial void OnSectionChanging(string value);
    partial void OnSectionChanged();
    partial void Onid_DirectiveChanging(System.Nullable<int> value);
    partial void Onid_DirectiveChanged();
    #endregion
		
		public Requirement()
		{
			this._Skills_satisfy_Requirements = new EntitySet<Skills_satisfy_Requirements>(new Action<Skills_satisfy_Requirements>(this.attach_Skills_satisfy_Requirements), new Action<Skills_satisfy_Requirements>(this.detach_Skills_satisfy_Requirements));
			this._Standard_satisfy_Requirements = new EntitySet<Standard_satisfy_Requirements>(new Action<Standard_satisfy_Requirements>(this.attach_Standard_satisfy_Requirements), new Action<Standard_satisfy_Requirements>(this.detach_Standard_satisfy_Requirements));
			this._Directive = default(EntityRef<Directive>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="VarChar(50)")]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Description", DbType="Text", UpdateCheck=UpdateCheck.Never)]
		public string Description
		{
			get
			{
				return this._Description;
			}
			set
			{
				if ((this._Description != value))
				{
					this.OnDescriptionChanging(value);
					this.SendPropertyChanging();
					this._Description = value;
					this.SendPropertyChanged("Description");
					this.OnDescriptionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Section", DbType="VarChar(50)")]
		public string Section
		{
			get
			{
				return this._Section;
			}
			set
			{
				if ((this._Section != value))
				{
					this.OnSectionChanging(value);
					this.SendPropertyChanging();
					this._Section = value;
					this.SendPropertyChanged("Section");
					this.OnSectionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id_Directive", DbType="Int")]
		public System.Nullable<int> id_Directive
		{
			get
			{
				return this._id_Directive;
			}
			set
			{
				if ((this._id_Directive != value))
				{
					if (this._Directive.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.Onid_DirectiveChanging(value);
					this.SendPropertyChanging();
					this._id_Directive = value;
					this.SendPropertyChanged("id_Directive");
					this.Onid_DirectiveChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Requirement_Skills_satisfy_Requirements", Storage="_Skills_satisfy_Requirements", ThisKey="ID", OtherKey="id_Requirement")]
		public EntitySet<Skills_satisfy_Requirements> Skills_satisfy_Requirements
		{
			get
			{
				return this._Skills_satisfy_Requirements;
			}
			set
			{
				this._Skills_satisfy_Requirements.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Requirement_Standard_satisfy_Requirements", Storage="_Standard_satisfy_Requirements", ThisKey="ID", OtherKey="id_Requirement")]
		public EntitySet<Standard_satisfy_Requirements> Standard_satisfy_Requirements
		{
			get
			{
				return this._Standard_satisfy_Requirements;
			}
			set
			{
				this._Standard_satisfy_Requirements.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Directive_Requirement", Storage="_Directive", ThisKey="id_Directive", OtherKey="ID", IsForeignKey=true)]
		public Directive Directive
		{
			get
			{
				return this._Directive.Entity;
			}
			set
			{
				Directive previousValue = this._Directive.Entity;
				if (((previousValue != value) 
							|| (this._Directive.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Directive.Entity = null;
						previousValue.Requirement.Remove(this);
					}
					this._Directive.Entity = value;
					if ((value != null))
					{
						value.Requirement.Add(this);
						this._id_Directive = value.ID;
					}
					else
					{
						this._id_Directive = default(Nullable<int>);
					}
					this.SendPropertyChanged("Directive");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Skills_satisfy_Requirements(Skills_satisfy_Requirements entity)
		{
			this.SendPropertyChanging();
			entity.Requirement = this;
		}
		
		private void detach_Skills_satisfy_Requirements(Skills_satisfy_Requirements entity)
		{
			this.SendPropertyChanging();
			entity.Requirement = null;
		}
		
		private void attach_Standard_satisfy_Requirements(Standard_satisfy_Requirements entity)
		{
			this.SendPropertyChanging();
			entity.Requirement = this;
		}
		
		private void detach_Standard_satisfy_Requirements(Standard_satisfy_Requirements entity)
		{
			this.SendPropertyChanging();
			entity.Requirement = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.DeviceType")]
	public partial class DeviceType : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private string _Name;
		
		private string _Description;
		
		private EntitySet<AuxiliaryDeviceType> _AuxiliaryDeviceType;
		
		private EntitySet<Protocol> _Protocol;
		
    #region Definizioni metodo Extensibility
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnDescriptionChanging(string value);
    partial void OnDescriptionChanged();
    #endregion
		
		public DeviceType()
		{
			this._AuxiliaryDeviceType = new EntitySet<AuxiliaryDeviceType>(new Action<AuxiliaryDeviceType>(this.attach_AuxiliaryDeviceType), new Action<AuxiliaryDeviceType>(this.detach_AuxiliaryDeviceType));
			this._Protocol = new EntitySet<Protocol>(new Action<Protocol>(this.attach_Protocol), new Action<Protocol>(this.detach_Protocol));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="VarChar(50)")]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Description", DbType="Text", UpdateCheck=UpdateCheck.Never)]
		public string Description
		{
			get
			{
				return this._Description;
			}
			set
			{
				if ((this._Description != value))
				{
					this.OnDescriptionChanging(value);
					this.SendPropertyChanging();
					this._Description = value;
					this.SendPropertyChanged("Description");
					this.OnDescriptionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="DeviceType_AuxiliaryDeviceType", Storage="_AuxiliaryDeviceType", ThisKey="ID", OtherKey="id_DeviceType")]
		public EntitySet<AuxiliaryDeviceType> AuxiliaryDeviceType
		{
			get
			{
				return this._AuxiliaryDeviceType;
			}
			set
			{
				this._AuxiliaryDeviceType.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="DeviceType_Protocol", Storage="_Protocol", ThisKey="ID", OtherKey="id_DeviceType")]
		public EntitySet<Protocol> Protocol
		{
			get
			{
				return this._Protocol;
			}
			set
			{
				this._Protocol.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_AuxiliaryDeviceType(AuxiliaryDeviceType entity)
		{
			this.SendPropertyChanging();
			entity.DeviceType = this;
		}
		
		private void detach_AuxiliaryDeviceType(AuxiliaryDeviceType entity)
		{
			this.SendPropertyChanging();
			entity.DeviceType = null;
		}
		
		private void attach_Protocol(Protocol entity)
		{
			this.SendPropertyChanging();
			entity.DeviceType = this;
		}
		
		private void detach_Protocol(Protocol entity)
		{
			this.SendPropertyChanging();
			entity.DeviceType = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.AuxiliaryDeviceType")]
	public partial class AuxiliaryDeviceType : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private int _id_DeviceType;
		
		private System.Nullable<int> _id_Environment;
		
		private EntitySet<Protocol> _Protocol;
		
		private EntityRef<DeviceType> _DeviceType;
		
		private EntityRef<Environment> _Environment;
		
    #region Definizioni metodo Extensibility
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void Onid_DeviceTypeChanging(int value);
    partial void Onid_DeviceTypeChanged();
    partial void Onid_EnvironmentChanging(System.Nullable<int> value);
    partial void Onid_EnvironmentChanged();
    #endregion
		
		public AuxiliaryDeviceType()
		{
			this._Protocol = new EntitySet<Protocol>(new Action<Protocol>(this.attach_Protocol), new Action<Protocol>(this.detach_Protocol));
			this._DeviceType = default(EntityRef<DeviceType>);
			this._Environment = default(EntityRef<Environment>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id_DeviceType", DbType="Int NOT NULL")]
		public int id_DeviceType
		{
			get
			{
				return this._id_DeviceType;
			}
			set
			{
				if ((this._id_DeviceType != value))
				{
					if (this._DeviceType.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.Onid_DeviceTypeChanging(value);
					this.SendPropertyChanging();
					this._id_DeviceType = value;
					this.SendPropertyChanged("id_DeviceType");
					this.Onid_DeviceTypeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id_Environment", DbType="Int")]
		public System.Nullable<int> id_Environment
		{
			get
			{
				return this._id_Environment;
			}
			set
			{
				if ((this._id_Environment != value))
				{
					if (this._Environment.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.Onid_EnvironmentChanging(value);
					this.SendPropertyChanging();
					this._id_Environment = value;
					this.SendPropertyChanged("id_Environment");
					this.Onid_EnvironmentChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="AuxiliaryDeviceType_Protocol", Storage="_Protocol", ThisKey="ID", OtherKey="id_AuxiliaryDeviceType")]
		public EntitySet<Protocol> Protocol
		{
			get
			{
				return this._Protocol;
			}
			set
			{
				this._Protocol.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="DeviceType_AuxiliaryDeviceType", Storage="_DeviceType", ThisKey="id_DeviceType", OtherKey="ID", IsForeignKey=true)]
		public DeviceType DeviceType
		{
			get
			{
				return this._DeviceType.Entity;
			}
			set
			{
				DeviceType previousValue = this._DeviceType.Entity;
				if (((previousValue != value) 
							|| (this._DeviceType.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._DeviceType.Entity = null;
						previousValue.AuxiliaryDeviceType.Remove(this);
					}
					this._DeviceType.Entity = value;
					if ((value != null))
					{
						value.AuxiliaryDeviceType.Add(this);
						this._id_DeviceType = value.ID;
					}
					else
					{
						this._id_DeviceType = default(int);
					}
					this.SendPropertyChanged("DeviceType");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Environment_AuxiliaryDeviceType", Storage="_Environment", ThisKey="id_Environment", OtherKey="ID", IsForeignKey=true)]
		public Environment Environment
		{
			get
			{
				return this._Environment.Entity;
			}
			set
			{
				Environment previousValue = this._Environment.Entity;
				if (((previousValue != value) 
							|| (this._Environment.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Environment.Entity = null;
						previousValue.AuxiliaryDeviceType.Remove(this);
					}
					this._Environment.Entity = value;
					if ((value != null))
					{
						value.AuxiliaryDeviceType.Add(this);
						this._id_Environment = value.ID;
					}
					else
					{
						this._id_Environment = default(Nullable<int>);
					}
					this.SendPropertyChanged("Environment");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Protocol(Protocol entity)
		{
			this.SendPropertyChanging();
			entity.AuxiliaryDeviceType = this;
		}
		
		private void detach_Protocol(Protocol entity)
		{
			this.SendPropertyChanging();
			entity.AuxiliaryDeviceType = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Directive")]
	public partial class Directive : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private string _Name;
		
		private string _Description;
		
		private string _Version;
		
		private string _Publisher;
		
		private System.Nullable<System.DateTime> _Publisher_date;
		
		private EntitySet<Requirement> _Requirement;
		
		private EntitySet<Domains_is_ruled_by_Directives> _Domains_is_ruled_by_Directives;
		
    #region Definizioni metodo Extensibility
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnDescriptionChanging(string value);
    partial void OnDescriptionChanged();
    partial void OnVersionChanging(string value);
    partial void OnVersionChanged();
    partial void OnPublisherChanging(string value);
    partial void OnPublisherChanged();
    partial void OnPublisher_dateChanging(System.Nullable<System.DateTime> value);
    partial void OnPublisher_dateChanged();
    #endregion
		
		public Directive()
		{
			this._Requirement = new EntitySet<Requirement>(new Action<Requirement>(this.attach_Requirement), new Action<Requirement>(this.detach_Requirement));
			this._Domains_is_ruled_by_Directives = new EntitySet<Domains_is_ruled_by_Directives>(new Action<Domains_is_ruled_by_Directives>(this.attach_Domains_is_ruled_by_Directives), new Action<Domains_is_ruled_by_Directives>(this.detach_Domains_is_ruled_by_Directives));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="VarChar(50)")]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Description", DbType="Text", UpdateCheck=UpdateCheck.Never)]
		public string Description
		{
			get
			{
				return this._Description;
			}
			set
			{
				if ((this._Description != value))
				{
					this.OnDescriptionChanging(value);
					this.SendPropertyChanging();
					this._Description = value;
					this.SendPropertyChanged("Description");
					this.OnDescriptionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Version", DbType="VarChar(50)")]
		public string Version
		{
			get
			{
				return this._Version;
			}
			set
			{
				if ((this._Version != value))
				{
					this.OnVersionChanging(value);
					this.SendPropertyChanging();
					this._Version = value;
					this.SendPropertyChanged("Version");
					this.OnVersionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Publisher", DbType="VarChar(50)")]
		public string Publisher
		{
			get
			{
				return this._Publisher;
			}
			set
			{
				if ((this._Publisher != value))
				{
					this.OnPublisherChanging(value);
					this.SendPropertyChanging();
					this._Publisher = value;
					this.SendPropertyChanged("Publisher");
					this.OnPublisherChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Publisher_date", DbType="Date")]
		public System.Nullable<System.DateTime> Publisher_date
		{
			get
			{
				return this._Publisher_date;
			}
			set
			{
				if ((this._Publisher_date != value))
				{
					this.OnPublisher_dateChanging(value);
					this.SendPropertyChanging();
					this._Publisher_date = value;
					this.SendPropertyChanged("Publisher_date");
					this.OnPublisher_dateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Directive_Requirement", Storage="_Requirement", ThisKey="ID", OtherKey="id_Directive")]
		public EntitySet<Requirement> Requirement
		{
			get
			{
				return this._Requirement;
			}
			set
			{
				this._Requirement.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Directive_Domains_is_ruled_by_Directives", Storage="_Domains_is_ruled_by_Directives", ThisKey="ID", OtherKey="id_Directive")]
		public EntitySet<Domains_is_ruled_by_Directives> Domains_is_ruled_by_Directives
		{
			get
			{
				return this._Domains_is_ruled_by_Directives;
			}
			set
			{
				this._Domains_is_ruled_by_Directives.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Requirement(Requirement entity)
		{
			this.SendPropertyChanging();
			entity.Directive = this;
		}
		
		private void detach_Requirement(Requirement entity)
		{
			this.SendPropertyChanging();
			entity.Directive = null;
		}
		
		private void attach_Domains_is_ruled_by_Directives(Domains_is_ruled_by_Directives entity)
		{
			this.SendPropertyChanging();
			entity.Directive = this;
		}
		
		private void detach_Domains_is_ruled_by_Directives(Domains_is_ruled_by_Directives entity)
		{
			this.SendPropertyChanging();
			entity.Directive = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.[User]")]
	public partial class User : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private string _Name;
		
		private string _Surname;
		
		private string _loginName;
		
		private System.Nullable<int> _id_Role;
		
		private EntitySet<Password> _Password;
		
		private EntityRef<Role> _Role;
		
    #region Definizioni metodo Extensibility
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnSurnameChanging(string value);
    partial void OnSurnameChanged();
    partial void OnloginNameChanging(string value);
    partial void OnloginNameChanged();
    partial void Onid_RoleChanging(System.Nullable<int> value);
    partial void Onid_RoleChanged();
    #endregion
		
		public User()
		{
			this._Password = new EntitySet<Password>(new Action<Password>(this.attach_Password), new Action<Password>(this.detach_Password));
			this._Role = default(EntityRef<Role>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="VarChar(50)")]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Surname", DbType="VarChar(50)")]
		public string Surname
		{
			get
			{
				return this._Surname;
			}
			set
			{
				if ((this._Surname != value))
				{
					this.OnSurnameChanging(value);
					this.SendPropertyChanging();
					this._Surname = value;
					this.SendPropertyChanged("Surname");
					this.OnSurnameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_loginName", DbType="VarChar(50)")]
		public string loginName
		{
			get
			{
				return this._loginName;
			}
			set
			{
				if ((this._loginName != value))
				{
					this.OnloginNameChanging(value);
					this.SendPropertyChanging();
					this._loginName = value;
					this.SendPropertyChanged("loginName");
					this.OnloginNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id_Role", DbType="Int")]
		public System.Nullable<int> id_Role
		{
			get
			{
				return this._id_Role;
			}
			set
			{
				if ((this._id_Role != value))
				{
					if (this._Role.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.Onid_RoleChanging(value);
					this.SendPropertyChanging();
					this._id_Role = value;
					this.SendPropertyChanged("id_Role");
					this.Onid_RoleChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_Password", Storage="_Password", ThisKey="ID", OtherKey="id_User")]
		public EntitySet<Password> Password
		{
			get
			{
				return this._Password;
			}
			set
			{
				this._Password.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Role_User", Storage="_Role", ThisKey="id_Role", OtherKey="ID", IsForeignKey=true)]
		public Role Role
		{
			get
			{
				return this._Role.Entity;
			}
			set
			{
				Role previousValue = this._Role.Entity;
				if (((previousValue != value) 
							|| (this._Role.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Role.Entity = null;
						previousValue.User.Remove(this);
					}
					this._Role.Entity = value;
					if ((value != null))
					{
						value.User.Add(this);
						this._id_Role = value.ID;
					}
					else
					{
						this._id_Role = default(Nullable<int>);
					}
					this.SendPropertyChanged("Role");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Password(Password entity)
		{
			this.SendPropertyChanging();
			entity.User = this;
		}
		
		private void detach_Password(Password entity)
		{
			this.SendPropertyChanging();
			entity.User = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Domain")]
	public partial class Domain : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private string _Name;
		
		private string _Description;
		
		private EntitySet<Domains_is_ruled_by_Directives> _Domains_is_ruled_by_Directives;
		
		private EntitySet<Standard> _Standard;
		
    #region Definizioni metodo Extensibility
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnDescriptionChanging(string value);
    partial void OnDescriptionChanged();
    #endregion
		
		public Domain()
		{
			this._Domains_is_ruled_by_Directives = new EntitySet<Domains_is_ruled_by_Directives>(new Action<Domains_is_ruled_by_Directives>(this.attach_Domains_is_ruled_by_Directives), new Action<Domains_is_ruled_by_Directives>(this.detach_Domains_is_ruled_by_Directives));
			this._Standard = new EntitySet<Standard>(new Action<Standard>(this.attach_Standard), new Action<Standard>(this.detach_Standard));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="VarChar(50)")]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Description", DbType="Text", UpdateCheck=UpdateCheck.Never)]
		public string Description
		{
			get
			{
				return this._Description;
			}
			set
			{
				if ((this._Description != value))
				{
					this.OnDescriptionChanging(value);
					this.SendPropertyChanging();
					this._Description = value;
					this.SendPropertyChanged("Description");
					this.OnDescriptionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Domain_Domains_is_ruled_by_Directives", Storage="_Domains_is_ruled_by_Directives", ThisKey="ID", OtherKey="id_Domain")]
		public EntitySet<Domains_is_ruled_by_Directives> Domains_is_ruled_by_Directives
		{
			get
			{
				return this._Domains_is_ruled_by_Directives;
			}
			set
			{
				this._Domains_is_ruled_by_Directives.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Domain_Standard", Storage="_Standard", ThisKey="ID", OtherKey="id_Domain")]
		public EntitySet<Standard> Standard
		{
			get
			{
				return this._Standard;
			}
			set
			{
				this._Standard.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Domains_is_ruled_by_Directives(Domains_is_ruled_by_Directives entity)
		{
			this.SendPropertyChanging();
			entity.Domain = this;
		}
		
		private void detach_Domains_is_ruled_by_Directives(Domains_is_ruled_by_Directives entity)
		{
			this.SendPropertyChanging();
			entity.Domain = null;
		}
		
		private void attach_Standard(Standard entity)
		{
			this.SendPropertyChanging();
			entity.Domain = this;
		}
		
		private void detach_Standard(Standard entity)
		{
			this.SendPropertyChanging();
			entity.Domain = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.[Domains-is_ruled_by-Directives]")]
	public partial class Domains_is_ruled_by_Directives : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private int _id_Directive;
		
		private int _id_Domain;
		
		private EntityRef<Directive> _Directive;
		
		private EntityRef<Domain> _Domain;
		
    #region Definizioni metodo Extensibility
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void Onid_DirectiveChanging(int value);
    partial void Onid_DirectiveChanged();
    partial void Onid_DomainChanging(int value);
    partial void Onid_DomainChanged();
    #endregion
		
		public Domains_is_ruled_by_Directives()
		{
			this._Directive = default(EntityRef<Directive>);
			this._Domain = default(EntityRef<Domain>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id_Directive", DbType="Int NOT NULL")]
		public int id_Directive
		{
			get
			{
				return this._id_Directive;
			}
			set
			{
				if ((this._id_Directive != value))
				{
					if (this._Directive.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.Onid_DirectiveChanging(value);
					this.SendPropertyChanging();
					this._id_Directive = value;
					this.SendPropertyChanged("id_Directive");
					this.Onid_DirectiveChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id_Domain", DbType="Int NOT NULL")]
		public int id_Domain
		{
			get
			{
				return this._id_Domain;
			}
			set
			{
				if ((this._id_Domain != value))
				{
					if (this._Domain.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.Onid_DomainChanging(value);
					this.SendPropertyChanging();
					this._id_Domain = value;
					this.SendPropertyChanged("id_Domain");
					this.Onid_DomainChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Directive_Domains_is_ruled_by_Directives", Storage="_Directive", ThisKey="id_Directive", OtherKey="ID", IsForeignKey=true)]
		public Directive Directive
		{
			get
			{
				return this._Directive.Entity;
			}
			set
			{
				Directive previousValue = this._Directive.Entity;
				if (((previousValue != value) 
							|| (this._Directive.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Directive.Entity = null;
						previousValue.Domains_is_ruled_by_Directives.Remove(this);
					}
					this._Directive.Entity = value;
					if ((value != null))
					{
						value.Domains_is_ruled_by_Directives.Add(this);
						this._id_Directive = value.ID;
					}
					else
					{
						this._id_Directive = default(int);
					}
					this.SendPropertyChanged("Directive");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Domain_Domains_is_ruled_by_Directives", Storage="_Domain", ThisKey="id_Domain", OtherKey="ID", IsForeignKey=true)]
		public Domain Domain
		{
			get
			{
				return this._Domain.Entity;
			}
			set
			{
				Domain previousValue = this._Domain.Entity;
				if (((previousValue != value) 
							|| (this._Domain.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Domain.Entity = null;
						previousValue.Domains_is_ruled_by_Directives.Remove(this);
					}
					this._Domain.Entity = value;
					if ((value != null))
					{
						value.Domains_is_ruled_by_Directives.Add(this);
						this._id_Domain = value.ID;
					}
					else
					{
						this._id_Domain = default(int);
					}
					this.SendPropertyChanged("Domain");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Environment")]
	public partial class Environment : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private string _location;
		
		private EntitySet<AuxiliaryDeviceType> _AuxiliaryDeviceType;
		
		private EntitySet<Protocol_associated_Environment> _Protocol_associated_Environment;
		
    #region Definizioni metodo Extensibility
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnlocationChanging(string value);
    partial void OnlocationChanged();
    #endregion
		
		public Environment()
		{
			this._AuxiliaryDeviceType = new EntitySet<AuxiliaryDeviceType>(new Action<AuxiliaryDeviceType>(this.attach_AuxiliaryDeviceType), new Action<AuxiliaryDeviceType>(this.detach_AuxiliaryDeviceType));
			this._Protocol_associated_Environment = new EntitySet<Protocol_associated_Environment>(new Action<Protocol_associated_Environment>(this.attach_Protocol_associated_Environment), new Action<Protocol_associated_Environment>(this.detach_Protocol_associated_Environment));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_location", DbType="VarChar(50)")]
		public string location
		{
			get
			{
				return this._location;
			}
			set
			{
				if ((this._location != value))
				{
					this.OnlocationChanging(value);
					this.SendPropertyChanging();
					this._location = value;
					this.SendPropertyChanged("location");
					this.OnlocationChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Environment_AuxiliaryDeviceType", Storage="_AuxiliaryDeviceType", ThisKey="ID", OtherKey="id_Environment")]
		public EntitySet<AuxiliaryDeviceType> AuxiliaryDeviceType
		{
			get
			{
				return this._AuxiliaryDeviceType;
			}
			set
			{
				this._AuxiliaryDeviceType.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Environment_Protocol_associated_Environment", Storage="_Protocol_associated_Environment", ThisKey="ID", OtherKey="id_Environment")]
		public EntitySet<Protocol_associated_Environment> Protocol_associated_Environment
		{
			get
			{
				return this._Protocol_associated_Environment;
			}
			set
			{
				this._Protocol_associated_Environment.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_AuxiliaryDeviceType(AuxiliaryDeviceType entity)
		{
			this.SendPropertyChanging();
			entity.Environment = this;
		}
		
		private void detach_AuxiliaryDeviceType(AuxiliaryDeviceType entity)
		{
			this.SendPropertyChanging();
			entity.Environment = null;
		}
		
		private void attach_Protocol_associated_Environment(Protocol_associated_Environment entity)
		{
			this.SendPropertyChanging();
			entity.Environment = this;
		}
		
		private void detach_Protocol_associated_Environment(Protocol_associated_Environment entity)
		{
			this.SendPropertyChanging();
			entity.Environment = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Password")]
	public partial class Password : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private int _id_User;
		
		private string _userPassword;
		
		private EntityRef<User> _User;
		
    #region Definizioni metodo Extensibility
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void Onid_UserChanging(int value);
    partial void Onid_UserChanged();
    partial void OnuserPasswordChanging(string value);
    partial void OnuserPasswordChanged();
    #endregion
		
		public Password()
		{
			this._User = default(EntityRef<User>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id_User", DbType="Int NOT NULL")]
		public int id_User
		{
			get
			{
				return this._id_User;
			}
			set
			{
				if ((this._id_User != value))
				{
					if (this._User.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.Onid_UserChanging(value);
					this.SendPropertyChanging();
					this._id_User = value;
					this.SendPropertyChanged("id_User");
					this.Onid_UserChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_userPassword", DbType="VarChar(256)")]
		public string userPassword
		{
			get
			{
				return this._userPassword;
			}
			set
			{
				if ((this._userPassword != value))
				{
					this.OnuserPasswordChanging(value);
					this.SendPropertyChanging();
					this._userPassword = value;
					this.SendPropertyChanged("userPassword");
					this.OnuserPasswordChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_Password", Storage="_User", ThisKey="id_User", OtherKey="ID", IsForeignKey=true)]
		public User User
		{
			get
			{
				return this._User.Entity;
			}
			set
			{
				User previousValue = this._User.Entity;
				if (((previousValue != value) 
							|| (this._User.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._User.Entity = null;
						previousValue.Password.Remove(this);
					}
					this._User.Entity = value;
					if ((value != null))
					{
						value.Password.Add(this);
						this._id_User = value.ID;
					}
					else
					{
						this._id_User = default(int);
					}
					this.SendPropertyChanged("User");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.[Procedure]")]
	public partial class Procedure : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private string _action1;
		
		private string _action2;
		
		private EntitySet<TestPlan> _TestPlan;
		
    #region Definizioni metodo Extensibility
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void Onaction1Changing(string value);
    partial void Onaction1Changed();
    partial void Onaction2Changing(string value);
    partial void Onaction2Changed();
    #endregion
		
		public Procedure()
		{
			this._TestPlan = new EntitySet<TestPlan>(new Action<TestPlan>(this.attach_TestPlan), new Action<TestPlan>(this.detach_TestPlan));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_action1", DbType="NChar(10)")]
		public string action1
		{
			get
			{
				return this._action1;
			}
			set
			{
				if ((this._action1 != value))
				{
					this.Onaction1Changing(value);
					this.SendPropertyChanging();
					this._action1 = value;
					this.SendPropertyChanged("action1");
					this.Onaction1Changed();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_action2", DbType="NChar(10)")]
		public string action2
		{
			get
			{
				return this._action2;
			}
			set
			{
				if ((this._action2 != value))
				{
					this.Onaction2Changing(value);
					this.SendPropertyChanging();
					this._action2 = value;
					this.SendPropertyChanged("action2");
					this.Onaction2Changed();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Procedure_TestPlan", Storage="_TestPlan", ThisKey="ID", OtherKey="id_Procedure")]
		public EntitySet<TestPlan> TestPlan
		{
			get
			{
				return this._TestPlan;
			}
			set
			{
				this._TestPlan.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_TestPlan(TestPlan entity)
		{
			this.SendPropertyChanging();
			entity.Procedure = this;
		}
		
		private void detach_TestPlan(TestPlan entity)
		{
			this.SendPropertyChanging();
			entity.Procedure = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Protocol")]
	public partial class Protocol : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private string _Name;
		
		private string _Description;
		
		private int _id_DeviceType;
		
		private int _id_TestPlan;
		
		private System.Nullable<int> _id_AuxiliaryDeviceType;
		
		private int _id_SkillTargetMetrics;
		
		private EntitySet<Protocol_associated_Environment> _Protocol_associated_Environment;
		
		private EntitySet<Protocol_validate_Skill> _Protocol_validate_Skill;
		
		private EntityRef<AuxiliaryDeviceType> _AuxiliaryDeviceType;
		
		private EntityRef<DeviceType> _DeviceType;
		
		private EntityRef<SkillTargetMetrics> _SkillTargetMetrics;
		
		private EntityRef<TestPlan> _TestPlan;
		
    #region Definizioni metodo Extensibility
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnDescriptionChanging(string value);
    partial void OnDescriptionChanged();
    partial void Onid_DeviceTypeChanging(int value);
    partial void Onid_DeviceTypeChanged();
    partial void Onid_TestPlanChanging(int value);
    partial void Onid_TestPlanChanged();
    partial void Onid_AuxiliaryDeviceTypeChanging(System.Nullable<int> value);
    partial void Onid_AuxiliaryDeviceTypeChanged();
    partial void Onid_SkillTargetMetricsChanging(int value);
    partial void Onid_SkillTargetMetricsChanged();
    #endregion
		
		public Protocol()
		{
			this._Protocol_associated_Environment = new EntitySet<Protocol_associated_Environment>(new Action<Protocol_associated_Environment>(this.attach_Protocol_associated_Environment), new Action<Protocol_associated_Environment>(this.detach_Protocol_associated_Environment));
			this._Protocol_validate_Skill = new EntitySet<Protocol_validate_Skill>(new Action<Protocol_validate_Skill>(this.attach_Protocol_validate_Skill), new Action<Protocol_validate_Skill>(this.detach_Protocol_validate_Skill));
			this._AuxiliaryDeviceType = default(EntityRef<AuxiliaryDeviceType>);
			this._DeviceType = default(EntityRef<DeviceType>);
			this._SkillTargetMetrics = default(EntityRef<SkillTargetMetrics>);
			this._TestPlan = default(EntityRef<TestPlan>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Description", DbType="Text NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public string Description
		{
			get
			{
				return this._Description;
			}
			set
			{
				if ((this._Description != value))
				{
					this.OnDescriptionChanging(value);
					this.SendPropertyChanging();
					this._Description = value;
					this.SendPropertyChanged("Description");
					this.OnDescriptionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id_DeviceType", DbType="Int NOT NULL")]
		public int id_DeviceType
		{
			get
			{
				return this._id_DeviceType;
			}
			set
			{
				if ((this._id_DeviceType != value))
				{
					if (this._DeviceType.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.Onid_DeviceTypeChanging(value);
					this.SendPropertyChanging();
					this._id_DeviceType = value;
					this.SendPropertyChanged("id_DeviceType");
					this.Onid_DeviceTypeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id_TestPlan", DbType="Int NOT NULL")]
		public int id_TestPlan
		{
			get
			{
				return this._id_TestPlan;
			}
			set
			{
				if ((this._id_TestPlan != value))
				{
					if (this._TestPlan.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.Onid_TestPlanChanging(value);
					this.SendPropertyChanging();
					this._id_TestPlan = value;
					this.SendPropertyChanged("id_TestPlan");
					this.Onid_TestPlanChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id_AuxiliaryDeviceType", DbType="Int")]
		public System.Nullable<int> id_AuxiliaryDeviceType
		{
			get
			{
				return this._id_AuxiliaryDeviceType;
			}
			set
			{
				if ((this._id_AuxiliaryDeviceType != value))
				{
					if (this._AuxiliaryDeviceType.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.Onid_AuxiliaryDeviceTypeChanging(value);
					this.SendPropertyChanging();
					this._id_AuxiliaryDeviceType = value;
					this.SendPropertyChanged("id_AuxiliaryDeviceType");
					this.Onid_AuxiliaryDeviceTypeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id_SkillTargetMetrics", DbType="Int NOT NULL")]
		public int id_SkillTargetMetrics
		{
			get
			{
				return this._id_SkillTargetMetrics;
			}
			set
			{
				if ((this._id_SkillTargetMetrics != value))
				{
					if (this._SkillTargetMetrics.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.Onid_SkillTargetMetricsChanging(value);
					this.SendPropertyChanging();
					this._id_SkillTargetMetrics = value;
					this.SendPropertyChanged("id_SkillTargetMetrics");
					this.Onid_SkillTargetMetricsChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Protocol_Protocol_associated_Environment", Storage="_Protocol_associated_Environment", ThisKey="ID", OtherKey="id_Protocol")]
		public EntitySet<Protocol_associated_Environment> Protocol_associated_Environment
		{
			get
			{
				return this._Protocol_associated_Environment;
			}
			set
			{
				this._Protocol_associated_Environment.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Protocol_Protocol_validate_Skill", Storage="_Protocol_validate_Skill", ThisKey="ID", OtherKey="id_Protocol")]
		public EntitySet<Protocol_validate_Skill> Protocol_validate_Skill
		{
			get
			{
				return this._Protocol_validate_Skill;
			}
			set
			{
				this._Protocol_validate_Skill.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="AuxiliaryDeviceType_Protocol", Storage="_AuxiliaryDeviceType", ThisKey="id_AuxiliaryDeviceType", OtherKey="ID", IsForeignKey=true)]
		public AuxiliaryDeviceType AuxiliaryDeviceType
		{
			get
			{
				return this._AuxiliaryDeviceType.Entity;
			}
			set
			{
				AuxiliaryDeviceType previousValue = this._AuxiliaryDeviceType.Entity;
				if (((previousValue != value) 
							|| (this._AuxiliaryDeviceType.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._AuxiliaryDeviceType.Entity = null;
						previousValue.Protocol.Remove(this);
					}
					this._AuxiliaryDeviceType.Entity = value;
					if ((value != null))
					{
						value.Protocol.Add(this);
						this._id_AuxiliaryDeviceType = value.ID;
					}
					else
					{
						this._id_AuxiliaryDeviceType = default(Nullable<int>);
					}
					this.SendPropertyChanged("AuxiliaryDeviceType");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="DeviceType_Protocol", Storage="_DeviceType", ThisKey="id_DeviceType", OtherKey="ID", IsForeignKey=true)]
		public DeviceType DeviceType
		{
			get
			{
				return this._DeviceType.Entity;
			}
			set
			{
				DeviceType previousValue = this._DeviceType.Entity;
				if (((previousValue != value) 
							|| (this._DeviceType.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._DeviceType.Entity = null;
						previousValue.Protocol.Remove(this);
					}
					this._DeviceType.Entity = value;
					if ((value != null))
					{
						value.Protocol.Add(this);
						this._id_DeviceType = value.ID;
					}
					else
					{
						this._id_DeviceType = default(int);
					}
					this.SendPropertyChanged("DeviceType");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="SkillTargetMetrics_Protocol", Storage="_SkillTargetMetrics", ThisKey="id_SkillTargetMetrics", OtherKey="ID", IsForeignKey=true)]
		public SkillTargetMetrics SkillTargetMetrics
		{
			get
			{
				return this._SkillTargetMetrics.Entity;
			}
			set
			{
				SkillTargetMetrics previousValue = this._SkillTargetMetrics.Entity;
				if (((previousValue != value) 
							|| (this._SkillTargetMetrics.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._SkillTargetMetrics.Entity = null;
						previousValue.Protocol.Remove(this);
					}
					this._SkillTargetMetrics.Entity = value;
					if ((value != null))
					{
						value.Protocol.Add(this);
						this._id_SkillTargetMetrics = value.ID;
					}
					else
					{
						this._id_SkillTargetMetrics = default(int);
					}
					this.SendPropertyChanged("SkillTargetMetrics");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="TestPlan_Protocol", Storage="_TestPlan", ThisKey="id_TestPlan", OtherKey="ID", IsForeignKey=true)]
		public TestPlan TestPlan
		{
			get
			{
				return this._TestPlan.Entity;
			}
			set
			{
				TestPlan previousValue = this._TestPlan.Entity;
				if (((previousValue != value) 
							|| (this._TestPlan.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._TestPlan.Entity = null;
						previousValue.Protocol.Remove(this);
					}
					this._TestPlan.Entity = value;
					if ((value != null))
					{
						value.Protocol.Add(this);
						this._id_TestPlan = value.ID;
					}
					else
					{
						this._id_TestPlan = default(int);
					}
					this.SendPropertyChanged("TestPlan");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Protocol_associated_Environment(Protocol_associated_Environment entity)
		{
			this.SendPropertyChanging();
			entity.Protocol = this;
		}
		
		private void detach_Protocol_associated_Environment(Protocol_associated_Environment entity)
		{
			this.SendPropertyChanging();
			entity.Protocol = null;
		}
		
		private void attach_Protocol_validate_Skill(Protocol_validate_Skill entity)
		{
			this.SendPropertyChanging();
			entity.Protocol = this;
		}
		
		private void detach_Protocol_validate_Skill(Protocol_validate_Skill entity)
		{
			this.SendPropertyChanging();
			entity.Protocol = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.[Protocol-associated-Environment]")]
	public partial class Protocol_associated_Environment : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private int _id_Protocol;
		
		private int _id_Environment;
		
		private System.Nullable<bool> _booleanValue;
		
		private System.Nullable<double> _numericValue;
		
		private EntityRef<Protocol> _Protocol;
		
		private EntityRef<Environment> _Environment;
		
    #region Definizioni metodo Extensibility
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void Onid_ProtocolChanging(int value);
    partial void Onid_ProtocolChanged();
    partial void Onid_EnvironmentChanging(int value);
    partial void Onid_EnvironmentChanged();
    partial void OnbooleanValueChanging(System.Nullable<bool> value);
    partial void OnbooleanValueChanged();
    partial void OnnumericValueChanging(System.Nullable<double> value);
    partial void OnnumericValueChanged();
    #endregion
		
		public Protocol_associated_Environment()
		{
			this._Protocol = default(EntityRef<Protocol>);
			this._Environment = default(EntityRef<Environment>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id_Protocol", DbType="Int NOT NULL")]
		public int id_Protocol
		{
			get
			{
				return this._id_Protocol;
			}
			set
			{
				if ((this._id_Protocol != value))
				{
					if (this._Protocol.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.Onid_ProtocolChanging(value);
					this.SendPropertyChanging();
					this._id_Protocol = value;
					this.SendPropertyChanged("id_Protocol");
					this.Onid_ProtocolChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id_Environment", DbType="Int NOT NULL")]
		public int id_Environment
		{
			get
			{
				return this._id_Environment;
			}
			set
			{
				if ((this._id_Environment != value))
				{
					if (this._Environment.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.Onid_EnvironmentChanging(value);
					this.SendPropertyChanging();
					this._id_Environment = value;
					this.SendPropertyChanged("id_Environment");
					this.Onid_EnvironmentChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_booleanValue", DbType="Bit")]
		public System.Nullable<bool> booleanValue
		{
			get
			{
				return this._booleanValue;
			}
			set
			{
				if ((this._booleanValue != value))
				{
					this.OnbooleanValueChanging(value);
					this.SendPropertyChanging();
					this._booleanValue = value;
					this.SendPropertyChanged("booleanValue");
					this.OnbooleanValueChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_numericValue", DbType="Float")]
		public System.Nullable<double> numericValue
		{
			get
			{
				return this._numericValue;
			}
			set
			{
				if ((this._numericValue != value))
				{
					this.OnnumericValueChanging(value);
					this.SendPropertyChanging();
					this._numericValue = value;
					this.SendPropertyChanged("numericValue");
					this.OnnumericValueChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Protocol_Protocol_associated_Environment", Storage="_Protocol", ThisKey="id_Protocol", OtherKey="ID", IsForeignKey=true)]
		public Protocol Protocol
		{
			get
			{
				return this._Protocol.Entity;
			}
			set
			{
				Protocol previousValue = this._Protocol.Entity;
				if (((previousValue != value) 
							|| (this._Protocol.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Protocol.Entity = null;
						previousValue.Protocol_associated_Environment.Remove(this);
					}
					this._Protocol.Entity = value;
					if ((value != null))
					{
						value.Protocol_associated_Environment.Add(this);
						this._id_Protocol = value.ID;
					}
					else
					{
						this._id_Protocol = default(int);
					}
					this.SendPropertyChanged("Protocol");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Environment_Protocol_associated_Environment", Storage="_Environment", ThisKey="id_Environment", OtherKey="ID", IsForeignKey=true)]
		public Environment Environment
		{
			get
			{
				return this._Environment.Entity;
			}
			set
			{
				Environment previousValue = this._Environment.Entity;
				if (((previousValue != value) 
							|| (this._Environment.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Environment.Entity = null;
						previousValue.Protocol_associated_Environment.Remove(this);
					}
					this._Environment.Entity = value;
					if ((value != null))
					{
						value.Protocol_associated_Environment.Add(this);
						this._id_Environment = value.ID;
					}
					else
					{
						this._id_Environment = default(int);
					}
					this.SendPropertyChanged("Environment");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.[Protocol-validate-Skill]")]
	public partial class Protocol_validate_Skill : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private int _id_Protocol;
		
		private int _id_Skill;
		
		private EntityRef<Protocol> _Protocol;
		
		private EntityRef<Skill> _Skill;
		
    #region Definizioni metodo Extensibility
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void Onid_ProtocolChanging(int value);
    partial void Onid_ProtocolChanged();
    partial void Onid_SkillChanging(int value);
    partial void Onid_SkillChanged();
    #endregion
		
		public Protocol_validate_Skill()
		{
			this._Protocol = default(EntityRef<Protocol>);
			this._Skill = default(EntityRef<Skill>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id_Protocol", DbType="Int NOT NULL")]
		public int id_Protocol
		{
			get
			{
				return this._id_Protocol;
			}
			set
			{
				if ((this._id_Protocol != value))
				{
					if (this._Protocol.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.Onid_ProtocolChanging(value);
					this.SendPropertyChanging();
					this._id_Protocol = value;
					this.SendPropertyChanged("id_Protocol");
					this.Onid_ProtocolChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id_Skill", DbType="Int NOT NULL")]
		public int id_Skill
		{
			get
			{
				return this._id_Skill;
			}
			set
			{
				if ((this._id_Skill != value))
				{
					if (this._Skill.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.Onid_SkillChanging(value);
					this.SendPropertyChanging();
					this._id_Skill = value;
					this.SendPropertyChanged("id_Skill");
					this.Onid_SkillChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Protocol_Protocol_validate_Skill", Storage="_Protocol", ThisKey="id_Protocol", OtherKey="ID", IsForeignKey=true)]
		public Protocol Protocol
		{
			get
			{
				return this._Protocol.Entity;
			}
			set
			{
				Protocol previousValue = this._Protocol.Entity;
				if (((previousValue != value) 
							|| (this._Protocol.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Protocol.Entity = null;
						previousValue.Protocol_validate_Skill.Remove(this);
					}
					this._Protocol.Entity = value;
					if ((value != null))
					{
						value.Protocol_validate_Skill.Add(this);
						this._id_Protocol = value.ID;
					}
					else
					{
						this._id_Protocol = default(int);
					}
					this.SendPropertyChanged("Protocol");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Skill_Protocol_validate_Skill", Storage="_Skill", ThisKey="id_Skill", OtherKey="ID", IsForeignKey=true)]
		public Skill Skill
		{
			get
			{
				return this._Skill.Entity;
			}
			set
			{
				Skill previousValue = this._Skill.Entity;
				if (((previousValue != value) 
							|| (this._Skill.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Skill.Entity = null;
						previousValue.Protocol_validate_Skill.Remove(this);
					}
					this._Skill.Entity = value;
					if ((value != null))
					{
						value.Protocol_validate_Skill.Add(this);
						this._id_Skill = value.ID;
					}
					else
					{
						this._id_Skill = default(int);
					}
					this.SendPropertyChanged("Skill");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Role")]
	public partial class Role : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private string _Name;
		
		private string _Description;
		
		private EntitySet<User> _User;
		
    #region Definizioni metodo Extensibility
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnDescriptionChanging(string value);
    partial void OnDescriptionChanged();
    #endregion
		
		public Role()
		{
			this._User = new EntitySet<User>(new Action<User>(this.attach_User), new Action<User>(this.detach_User));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Description", DbType="Text", UpdateCheck=UpdateCheck.Never)]
		public string Description
		{
			get
			{
				return this._Description;
			}
			set
			{
				if ((this._Description != value))
				{
					this.OnDescriptionChanging(value);
					this.SendPropertyChanging();
					this._Description = value;
					this.SendPropertyChanged("Description");
					this.OnDescriptionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Role_User", Storage="_User", ThisKey="ID", OtherKey="id_Role")]
		public EntitySet<User> User
		{
			get
			{
				return this._User;
			}
			set
			{
				this._User.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_User(User entity)
		{
			this.SendPropertyChanging();
			entity.Role = this;
		}
		
		private void detach_User(User entity)
		{
			this.SendPropertyChanging();
			entity.Role = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.SafetyFunction")]
	public partial class SafetyFunction : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private string _Name;
		
		private string _Description;
		
		private EntitySet<SafetyFunction_realize_Skill> _SafetyFunction_realize_Skill;
		
    #region Definizioni metodo Extensibility
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnDescriptionChanging(string value);
    partial void OnDescriptionChanged();
    #endregion
		
		public SafetyFunction()
		{
			this._SafetyFunction_realize_Skill = new EntitySet<SafetyFunction_realize_Skill>(new Action<SafetyFunction_realize_Skill>(this.attach_SafetyFunction_realize_Skill), new Action<SafetyFunction_realize_Skill>(this.detach_SafetyFunction_realize_Skill));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="VarChar(50)")]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Description", DbType="Text", UpdateCheck=UpdateCheck.Never)]
		public string Description
		{
			get
			{
				return this._Description;
			}
			set
			{
				if ((this._Description != value))
				{
					this.OnDescriptionChanging(value);
					this.SendPropertyChanging();
					this._Description = value;
					this.SendPropertyChanged("Description");
					this.OnDescriptionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="SafetyFunction_SafetyFunction_realize_Skill", Storage="_SafetyFunction_realize_Skill", ThisKey="ID", OtherKey="id_SafetyFunction")]
		public EntitySet<SafetyFunction_realize_Skill> SafetyFunction_realize_Skill
		{
			get
			{
				return this._SafetyFunction_realize_Skill;
			}
			set
			{
				this._SafetyFunction_realize_Skill.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_SafetyFunction_realize_Skill(SafetyFunction_realize_Skill entity)
		{
			this.SendPropertyChanging();
			entity.SafetyFunction = this;
		}
		
		private void detach_SafetyFunction_realize_Skill(SafetyFunction_realize_Skill entity)
		{
			this.SendPropertyChanging();
			entity.SafetyFunction = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.[SafetyFunction-realize-Skill]")]
	public partial class SafetyFunction_realize_Skill : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private int _id_Skill;
		
		private int _id_SafetyFunction;
		
		private EntityRef<SafetyFunction> _SafetyFunction;
		
		private EntityRef<Skill> _Skill;
		
    #region Definizioni metodo Extensibility
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void Onid_SkillChanging(int value);
    partial void Onid_SkillChanged();
    partial void Onid_SafetyFunctionChanging(int value);
    partial void Onid_SafetyFunctionChanged();
    #endregion
		
		public SafetyFunction_realize_Skill()
		{
			this._SafetyFunction = default(EntityRef<SafetyFunction>);
			this._Skill = default(EntityRef<Skill>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id_Skill", DbType="Int NOT NULL")]
		public int id_Skill
		{
			get
			{
				return this._id_Skill;
			}
			set
			{
				if ((this._id_Skill != value))
				{
					if (this._Skill.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.Onid_SkillChanging(value);
					this.SendPropertyChanging();
					this._id_Skill = value;
					this.SendPropertyChanged("id_Skill");
					this.Onid_SkillChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id_SafetyFunction", DbType="Int NOT NULL")]
		public int id_SafetyFunction
		{
			get
			{
				return this._id_SafetyFunction;
			}
			set
			{
				if ((this._id_SafetyFunction != value))
				{
					if (this._SafetyFunction.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.Onid_SafetyFunctionChanging(value);
					this.SendPropertyChanging();
					this._id_SafetyFunction = value;
					this.SendPropertyChanged("id_SafetyFunction");
					this.Onid_SafetyFunctionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="SafetyFunction_SafetyFunction_realize_Skill", Storage="_SafetyFunction", ThisKey="id_SafetyFunction", OtherKey="ID", IsForeignKey=true)]
		public SafetyFunction SafetyFunction
		{
			get
			{
				return this._SafetyFunction.Entity;
			}
			set
			{
				SafetyFunction previousValue = this._SafetyFunction.Entity;
				if (((previousValue != value) 
							|| (this._SafetyFunction.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._SafetyFunction.Entity = null;
						previousValue.SafetyFunction_realize_Skill.Remove(this);
					}
					this._SafetyFunction.Entity = value;
					if ((value != null))
					{
						value.SafetyFunction_realize_Skill.Add(this);
						this._id_SafetyFunction = value.ID;
					}
					else
					{
						this._id_SafetyFunction = default(int);
					}
					this.SendPropertyChanged("SafetyFunction");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Skill_SafetyFunction_realize_Skill", Storage="_Skill", ThisKey="id_Skill", OtherKey="ID", IsForeignKey=true)]
		public Skill Skill
		{
			get
			{
				return this._Skill.Entity;
			}
			set
			{
				Skill previousValue = this._Skill.Entity;
				if (((previousValue != value) 
							|| (this._Skill.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Skill.Entity = null;
						previousValue.SafetyFunction_realize_Skill.Remove(this);
					}
					this._Skill.Entity = value;
					if ((value != null))
					{
						value.SafetyFunction_realize_Skill.Add(this);
						this._id_Skill = value.ID;
					}
					else
					{
						this._id_Skill = default(int);
					}
					this.SendPropertyChanged("Skill");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.SkillTargetMetrics")]
	public partial class SkillTargetMetrics : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private string _targetMetricOne;
		
		private string _targetMetricTwo;
		
		private EntitySet<Protocol> _Protocol;
		
    #region Definizioni metodo Extensibility
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OntargetMetricOneChanging(string value);
    partial void OntargetMetricOneChanged();
    partial void OntargetMetricTwoChanging(string value);
    partial void OntargetMetricTwoChanged();
    #endregion
		
		public SkillTargetMetrics()
		{
			this._Protocol = new EntitySet<Protocol>(new Action<Protocol>(this.attach_Protocol), new Action<Protocol>(this.detach_Protocol));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_targetMetricOne", DbType="VarChar(50)")]
		public string targetMetricOne
		{
			get
			{
				return this._targetMetricOne;
			}
			set
			{
				if ((this._targetMetricOne != value))
				{
					this.OntargetMetricOneChanging(value);
					this.SendPropertyChanging();
					this._targetMetricOne = value;
					this.SendPropertyChanged("targetMetricOne");
					this.OntargetMetricOneChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_targetMetricTwo", DbType="VarChar(50)")]
		public string targetMetricTwo
		{
			get
			{
				return this._targetMetricTwo;
			}
			set
			{
				if ((this._targetMetricTwo != value))
				{
					this.OntargetMetricTwoChanging(value);
					this.SendPropertyChanging();
					this._targetMetricTwo = value;
					this.SendPropertyChanged("targetMetricTwo");
					this.OntargetMetricTwoChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="SkillTargetMetrics_Protocol", Storage="_Protocol", ThisKey="ID", OtherKey="id_SkillTargetMetrics")]
		public EntitySet<Protocol> Protocol
		{
			get
			{
				return this._Protocol;
			}
			set
			{
				this._Protocol.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Protocol(Protocol entity)
		{
			this.SendPropertyChanging();
			entity.SkillTargetMetrics = this;
		}
		
		private void detach_Protocol(Protocol entity)
		{
			this.SendPropertyChanging();
			entity.SkillTargetMetrics = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Standard")]
	public partial class Standard : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private string _Name;
		
		private string _Description;
		
		private string _Version;
		
		private string _Type;
		
		private string _Publisher;
		
		private System.Nullable<System.DateTime> _Publisher_date;
		
		private string _Country;
		
		private int _id_Domain;
		
		private EntitySet<Standard_satisfy_Requirements> _Standard_satisfy_Requirements;
		
		private EntitySet<Standard_binds_Skills> _Standard_binds_Skills;
		
		private EntityRef<Domain> _Domain;
		
    #region Definizioni metodo Extensibility
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnDescriptionChanging(string value);
    partial void OnDescriptionChanged();
    partial void OnVersionChanging(string value);
    partial void OnVersionChanged();
    partial void OnTypeChanging(string value);
    partial void OnTypeChanged();
    partial void OnPublisherChanging(string value);
    partial void OnPublisherChanged();
    partial void OnPublisher_dateChanging(System.Nullable<System.DateTime> value);
    partial void OnPublisher_dateChanged();
    partial void OnCountryChanging(string value);
    partial void OnCountryChanged();
    partial void Onid_DomainChanging(int value);
    partial void Onid_DomainChanged();
    #endregion
		
		public Standard()
		{
			this._Standard_satisfy_Requirements = new EntitySet<Standard_satisfy_Requirements>(new Action<Standard_satisfy_Requirements>(this.attach_Standard_satisfy_Requirements), new Action<Standard_satisfy_Requirements>(this.detach_Standard_satisfy_Requirements));
			this._Standard_binds_Skills = new EntitySet<Standard_binds_Skills>(new Action<Standard_binds_Skills>(this.attach_Standard_binds_Skills), new Action<Standard_binds_Skills>(this.detach_Standard_binds_Skills));
			this._Domain = default(EntityRef<Domain>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="VarChar(50)")]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Description", DbType="Text", UpdateCheck=UpdateCheck.Never)]
		public string Description
		{
			get
			{
				return this._Description;
			}
			set
			{
				if ((this._Description != value))
				{
					this.OnDescriptionChanging(value);
					this.SendPropertyChanging();
					this._Description = value;
					this.SendPropertyChanged("Description");
					this.OnDescriptionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Version", DbType="VarChar(50)")]
		public string Version
		{
			get
			{
				return this._Version;
			}
			set
			{
				if ((this._Version != value))
				{
					this.OnVersionChanging(value);
					this.SendPropertyChanging();
					this._Version = value;
					this.SendPropertyChanged("Version");
					this.OnVersionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Type", DbType="VarChar(50)")]
		public string Type
		{
			get
			{
				return this._Type;
			}
			set
			{
				if ((this._Type != value))
				{
					this.OnTypeChanging(value);
					this.SendPropertyChanging();
					this._Type = value;
					this.SendPropertyChanged("Type");
					this.OnTypeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Publisher", DbType="VarChar(50)")]
		public string Publisher
		{
			get
			{
				return this._Publisher;
			}
			set
			{
				if ((this._Publisher != value))
				{
					this.OnPublisherChanging(value);
					this.SendPropertyChanging();
					this._Publisher = value;
					this.SendPropertyChanged("Publisher");
					this.OnPublisherChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Publisher_date", DbType="Date")]
		public System.Nullable<System.DateTime> Publisher_date
		{
			get
			{
				return this._Publisher_date;
			}
			set
			{
				if ((this._Publisher_date != value))
				{
					this.OnPublisher_dateChanging(value);
					this.SendPropertyChanging();
					this._Publisher_date = value;
					this.SendPropertyChanged("Publisher_date");
					this.OnPublisher_dateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Country", DbType="VarChar(50)")]
		public string Country
		{
			get
			{
				return this._Country;
			}
			set
			{
				if ((this._Country != value))
				{
					this.OnCountryChanging(value);
					this.SendPropertyChanging();
					this._Country = value;
					this.SendPropertyChanged("Country");
					this.OnCountryChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id_Domain", DbType="Int NOT NULL")]
		public int id_Domain
		{
			get
			{
				return this._id_Domain;
			}
			set
			{
				if ((this._id_Domain != value))
				{
					if (this._Domain.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.Onid_DomainChanging(value);
					this.SendPropertyChanging();
					this._id_Domain = value;
					this.SendPropertyChanged("id_Domain");
					this.Onid_DomainChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Standard_Standard_satisfy_Requirements", Storage="_Standard_satisfy_Requirements", ThisKey="ID", OtherKey="id_Standard")]
		public EntitySet<Standard_satisfy_Requirements> Standard_satisfy_Requirements
		{
			get
			{
				return this._Standard_satisfy_Requirements;
			}
			set
			{
				this._Standard_satisfy_Requirements.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Standard_Standard_binds_Skills", Storage="_Standard_binds_Skills", ThisKey="ID", OtherKey="id_Standard")]
		public EntitySet<Standard_binds_Skills> Standard_binds_Skills
		{
			get
			{
				return this._Standard_binds_Skills;
			}
			set
			{
				this._Standard_binds_Skills.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Domain_Standard", Storage="_Domain", ThisKey="id_Domain", OtherKey="ID", IsForeignKey=true)]
		public Domain Domain
		{
			get
			{
				return this._Domain.Entity;
			}
			set
			{
				Domain previousValue = this._Domain.Entity;
				if (((previousValue != value) 
							|| (this._Domain.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Domain.Entity = null;
						previousValue.Standard.Remove(this);
					}
					this._Domain.Entity = value;
					if ((value != null))
					{
						value.Standard.Add(this);
						this._id_Domain = value.ID;
					}
					else
					{
						this._id_Domain = default(int);
					}
					this.SendPropertyChanged("Domain");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Standard_satisfy_Requirements(Standard_satisfy_Requirements entity)
		{
			this.SendPropertyChanging();
			entity.Standard = this;
		}
		
		private void detach_Standard_satisfy_Requirements(Standard_satisfy_Requirements entity)
		{
			this.SendPropertyChanging();
			entity.Standard = null;
		}
		
		private void attach_Standard_binds_Skills(Standard_binds_Skills entity)
		{
			this.SendPropertyChanging();
			entity.Standard = this;
		}
		
		private void detach_Standard_binds_Skills(Standard_binds_Skills entity)
		{
			this.SendPropertyChanging();
			entity.Standard = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Standard_satisfy_Requirements")]
	public partial class Standard_satisfy_Requirements : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private int _id_Standard;
		
		private int _id_Requirement;
		
		private EntityRef<Requirement> _Requirement;
		
		private EntityRef<Standard> _Standard;
		
    #region Definizioni metodo Extensibility
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void Onid_StandardChanging(int value);
    partial void Onid_StandardChanged();
    partial void Onid_RequirementChanging(int value);
    partial void Onid_RequirementChanged();
    #endregion
		
		public Standard_satisfy_Requirements()
		{
			this._Requirement = default(EntityRef<Requirement>);
			this._Standard = default(EntityRef<Standard>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id_Standard", DbType="Int NOT NULL")]
		public int id_Standard
		{
			get
			{
				return this._id_Standard;
			}
			set
			{
				if ((this._id_Standard != value))
				{
					if (this._Standard.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.Onid_StandardChanging(value);
					this.SendPropertyChanging();
					this._id_Standard = value;
					this.SendPropertyChanged("id_Standard");
					this.Onid_StandardChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id_Requirement", DbType="Int NOT NULL")]
		public int id_Requirement
		{
			get
			{
				return this._id_Requirement;
			}
			set
			{
				if ((this._id_Requirement != value))
				{
					if (this._Requirement.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.Onid_RequirementChanging(value);
					this.SendPropertyChanging();
					this._id_Requirement = value;
					this.SendPropertyChanged("id_Requirement");
					this.Onid_RequirementChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Requirement_Standard_satisfy_Requirements", Storage="_Requirement", ThisKey="id_Requirement", OtherKey="ID", IsForeignKey=true)]
		public Requirement Requirement
		{
			get
			{
				return this._Requirement.Entity;
			}
			set
			{
				Requirement previousValue = this._Requirement.Entity;
				if (((previousValue != value) 
							|| (this._Requirement.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Requirement.Entity = null;
						previousValue.Standard_satisfy_Requirements.Remove(this);
					}
					this._Requirement.Entity = value;
					if ((value != null))
					{
						value.Standard_satisfy_Requirements.Add(this);
						this._id_Requirement = value.ID;
					}
					else
					{
						this._id_Requirement = default(int);
					}
					this.SendPropertyChanged("Requirement");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Standard_Standard_satisfy_Requirements", Storage="_Standard", ThisKey="id_Standard", OtherKey="ID", IsForeignKey=true)]
		public Standard Standard
		{
			get
			{
				return this._Standard.Entity;
			}
			set
			{
				Standard previousValue = this._Standard.Entity;
				if (((previousValue != value) 
							|| (this._Standard.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Standard.Entity = null;
						previousValue.Standard_satisfy_Requirements.Remove(this);
					}
					this._Standard.Entity = value;
					if ((value != null))
					{
						value.Standard_satisfy_Requirements.Add(this);
						this._id_Standard = value.ID;
					}
					else
					{
						this._id_Standard = default(int);
					}
					this.SendPropertyChanged("Standard");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.[Standard-binds-Skills]")]
	public partial class Standard_binds_Skills : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private int _id_Standard;
		
		private int _id_Skill;
		
		private double _Ranking;
		
		private EntityRef<Skill> _Skill;
		
		private EntityRef<Standard> _Standard;
		
    #region Definizioni metodo Extensibility
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void Onid_StandardChanging(int value);
    partial void Onid_StandardChanged();
    partial void Onid_SkillChanging(int value);
    partial void Onid_SkillChanged();
    partial void OnRankingChanging(double value);
    partial void OnRankingChanged();
    #endregion
		
		public Standard_binds_Skills()
		{
			this._Skill = default(EntityRef<Skill>);
			this._Standard = default(EntityRef<Standard>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id_Standard", DbType="Int NOT NULL")]
		public int id_Standard
		{
			get
			{
				return this._id_Standard;
			}
			set
			{
				if ((this._id_Standard != value))
				{
					if (this._Standard.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.Onid_StandardChanging(value);
					this.SendPropertyChanging();
					this._id_Standard = value;
					this.SendPropertyChanged("id_Standard");
					this.Onid_StandardChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id_Skill", DbType="Int NOT NULL")]
		public int id_Skill
		{
			get
			{
				return this._id_Skill;
			}
			set
			{
				if ((this._id_Skill != value))
				{
					if (this._Skill.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.Onid_SkillChanging(value);
					this.SendPropertyChanging();
					this._id_Skill = value;
					this.SendPropertyChanged("id_Skill");
					this.Onid_SkillChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Ranking", DbType="Float NOT NULL")]
		public double Ranking
		{
			get
			{
				return this._Ranking;
			}
			set
			{
				if ((this._Ranking != value))
				{
					this.OnRankingChanging(value);
					this.SendPropertyChanging();
					this._Ranking = value;
					this.SendPropertyChanged("Ranking");
					this.OnRankingChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Skill_Standard_binds_Skills", Storage="_Skill", ThisKey="id_Skill", OtherKey="ID", IsForeignKey=true)]
		public Skill Skill
		{
			get
			{
				return this._Skill.Entity;
			}
			set
			{
				Skill previousValue = this._Skill.Entity;
				if (((previousValue != value) 
							|| (this._Skill.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Skill.Entity = null;
						previousValue.Standard_binds_Skills.Remove(this);
					}
					this._Skill.Entity = value;
					if ((value != null))
					{
						value.Standard_binds_Skills.Add(this);
						this._id_Skill = value.ID;
					}
					else
					{
						this._id_Skill = default(int);
					}
					this.SendPropertyChanged("Skill");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Standard_Standard_binds_Skills", Storage="_Standard", ThisKey="id_Standard", OtherKey="ID", IsForeignKey=true)]
		public Standard Standard
		{
			get
			{
				return this._Standard.Entity;
			}
			set
			{
				Standard previousValue = this._Standard.Entity;
				if (((previousValue != value) 
							|| (this._Standard.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Standard.Entity = null;
						previousValue.Standard_binds_Skills.Remove(this);
					}
					this._Standard.Entity = value;
					if ((value != null))
					{
						value.Standard_binds_Skills.Add(this);
						this._id_Standard = value.ID;
					}
					else
					{
						this._id_Standard = default(int);
					}
					this.SendPropertyChanged("Standard");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.TestPlan")]
	public partial class TestPlan : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private string _tp1;
		
		private int _id_Procedure;
		
		private EntitySet<Protocol> _Protocol;
		
		private EntityRef<Procedure> _Procedure;
		
    #region Definizioni metodo Extensibility
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void Ontp1Changing(string value);
    partial void Ontp1Changed();
    partial void Onid_ProcedureChanging(int value);
    partial void Onid_ProcedureChanged();
    #endregion
		
		public TestPlan()
		{
			this._Protocol = new EntitySet<Protocol>(new Action<Protocol>(this.attach_Protocol), new Action<Protocol>(this.detach_Protocol));
			this._Procedure = default(EntityRef<Procedure>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_tp1", DbType="NChar(10)")]
		public string tp1
		{
			get
			{
				return this._tp1;
			}
			set
			{
				if ((this._tp1 != value))
				{
					this.Ontp1Changing(value);
					this.SendPropertyChanging();
					this._tp1 = value;
					this.SendPropertyChanged("tp1");
					this.Ontp1Changed();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id_Procedure", DbType="Int NOT NULL")]
		public int id_Procedure
		{
			get
			{
				return this._id_Procedure;
			}
			set
			{
				if ((this._id_Procedure != value))
				{
					if (this._Procedure.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.Onid_ProcedureChanging(value);
					this.SendPropertyChanging();
					this._id_Procedure = value;
					this.SendPropertyChanged("id_Procedure");
					this.Onid_ProcedureChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="TestPlan_Protocol", Storage="_Protocol", ThisKey="ID", OtherKey="id_TestPlan")]
		public EntitySet<Protocol> Protocol
		{
			get
			{
				return this._Protocol;
			}
			set
			{
				this._Protocol.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Procedure_TestPlan", Storage="_Procedure", ThisKey="id_Procedure", OtherKey="ID", IsForeignKey=true)]
		public Procedure Procedure
		{
			get
			{
				return this._Procedure.Entity;
			}
			set
			{
				Procedure previousValue = this._Procedure.Entity;
				if (((previousValue != value) 
							|| (this._Procedure.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Procedure.Entity = null;
						previousValue.TestPlan.Remove(this);
					}
					this._Procedure.Entity = value;
					if ((value != null))
					{
						value.TestPlan.Add(this);
						this._id_Procedure = value.ID;
					}
					else
					{
						this._id_Procedure = default(int);
					}
					this.SendPropertyChanged("Procedure");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Protocol(Protocol entity)
		{
			this.SendPropertyChanging();
			entity.TestPlan = this;
		}
		
		private void detach_Protocol(Protocol entity)
		{
			this.SendPropertyChanging();
			entity.TestPlan = null;
		}
	}
}
#pragma warning restore 1591
